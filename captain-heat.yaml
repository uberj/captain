heat_template_version: 2013-05-23
parameters:
  key_name:
    type: string
  flavor:
    type: string
    default: m1.medium
  image:
    type: string
    default: ubuntu-trusty.amd64-0.3.0.2014080707

  # Network parameters. These should all have sane defaults
  public_net_id:
    type: string
    default: public
    description: >
      ID of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    default: private
    description: Name of private network to be created
  private_net_cidr:
    type: string
    default: 10.1.0.0/24
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    default: 10.1.0.1
    description: Private network gateway address
  private_net_pool_start:
    type: string
    default: 10.1.0.10
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    default: 10.1.0.254
    description: End of private network IP address allocation pool


resources:
  secgroup-ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable traffic external traffic on SSH.
      rules: [{protocol: tcp, port_range_max: 22, port_range_min: 22},]

  secgroup-web:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable traffic external traffic on SSH.
      rules: [{protocol: tcp, port_range_max: 80, port_range_min: 80},]

  secgroup-internal:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable all traffic between instances.
      rules: [{protocol: tcp, port_range_max: 65535, port_range_min: 1, remote_mode: remote_group_id},]

  secgroup-icmp:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable traffic external traffic on SSH.
      rules: [{protocol: icmp}]


  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }
      dns_nameservers:
        - 8.8.8.8

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net_id }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  db_server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG
      networks:
        - port: { get_resource: db_port }

  db_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups:
        - { get_resource: secgroup-internal }
        - { get_resource: secgroup-web }
        - { get_resource: secgroup-ssh }
        - { get_resource: secgroup-icmp }

  db_floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [ db_server ]
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: db_port }

  mysql_server_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: db_name
      - name: root_password
      - name: username
      - name: password
      - name: allowed_hosts
        default: '10.1.0.%'
      outputs:
      - name: result
      config: |
        class { 'm::mysql::allinone':
          root_password     => $::root_password,
          db_name           => $::db_name,
          user              => $::username,
          password          => $::password,
          allowed_hosts     => $::allowed_hosts,
        }

  mysql_server_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: mysql_server_config
      server:
        get_resource: db_server
      input_values:
        db_name:
          get_attr: [app_config_deployment, db_name]
        root_password:
          get_attr: [app_config_deployment, db_root_password]
        username:
          get_attr: [app_config_deployment, db_username]
        password:
          get_attr: [app_config_deployment, db_password]


  web_server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG
      networks:
        - port: { get_resource: web_port }

  # Create a port fot the instance
  web_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups:
        - { get_resource: secgroup-internal }
        - { get_resource: secgroup-web }
        - { get_resource: secgroup-ssh }
        - { get_resource: secgroup-icmp }

  # Give the instance external connectivity
  web_floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [ web_server ]
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: web_port }

  shove_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: rabbit_host
      - name: rabbit_user
      - name: rabbit_password
      - name: rabbit_vhost
      - name: project_path
      outputs:
      - name: result
      config: |
        class { 'captainshove::shove':
          rabbit_host  => $::rabbit_host,
          rabbit_user  => $::rabbit_user,
          rabbit_pass  => $::rabbit_password,
          rabbit_vhost => $::rabbit_vhost,
          project_path => $::project_path,
          project_name => 'captain'
        }

  # Deploy the apache configuration onto the web_server instance resource
  shove_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: 
      - db_server
    properties:
      config:
        get_resource: shove_config
      server:
        get_resource: web_server
      input_values:
        rabbit_host:
          get_attr: [db_server, first_address]
        rabbit_user:
          get_attr: [app_config_deployment, rabbit_user]
        rabbit_password:
          get_attr: [app_config_deployment, rabbit_password]
        rabbit_vhost:
          get_attr: [app_config_deployment, rabbit_vhost]
        project_path:
          get_attr: [app_config_deployment, apache_install_root]

  apache_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: vhost_name
      - name: install_root
      - name: wsgi_path
      - name: static_root
      outputs:
      - name: result
      config: |
        class {'m::apache::python_vhost':
          vhost_name   => $::vhost_name,
          install_root => $::install_root,
          wsgi_path    => $::wsgi_path,
          static_root  => $::static_root,
        }

  # Deploy the apache configuration onto the web_server instance resource
  apache_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: apache_config
      server:
        get_resource: web_server
      input_values:
        vhost_name:
          get_attr: [app_config_deployment, apache_vhost_name]
        install_root:
          get_attr: [app_config_deployment, apache_install_root]
        wsgi_path:
          get_attr: [app_config_deployment, apache_wsgi_path]
        static_root:
          get_attr: [app_config_deployment, apache_static_root]

  # A SoftwareConfig for installing mysql client bindings
  mysql_client_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      outputs:
      - name: result
      config: |
        include ::m::mysql::python_client

  # Installing (or deploying) the mysql_client_config onto the defined web_server instance resource.
  mysql_client_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: mysql_client_config
      server:
        get_resource: web_server

  rabbit_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: vhost_name
      - name: user
      - name: password
      outputs:
      - name: result
      config: |
        class {'rabbitmq':
            port             => 5672,
            package_provider => 'apt',
            admin_enable     => true,
            manage_repos     => false,
            environment_variables   => {
              # The NODENAME *must* be rabbit
              # See http://serverfault.com/questions/562911/trying-to-install-rabbitmq-with-puppet/573909#573909
              'RABBITMQ_NODENAME'     => 'rabbit',
              'RABBITMQ_SERVICENAME'  => 'RabbitMQ'
            }
          }

        rabbitmq_vhost { "$::vhost_name":
          ensure  => present,
          require => Class['rabbitmq'],
        }

        rabbitmq_user { $::user:
          admin    => false,
          password => $::password,
          require => Class['rabbitmq'],
        }

        rabbitmq_user_permissions { "$::user@/":
          configure_permission => '.*',
          read_permission      => '.*',
          write_permission     => '.*',
        }


  # Deploy the apache configuration onto the web_server instance resource
  rabbit_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: rabbit_config
      server:
        get_resource: db_server
      input_values:
        vhost_name:
          get_attr: [app_config_deployment, rabbit_vhost]
        user:
          get_attr: [app_config_deployment, rabbit_user]
        password:
          get_attr: [app_config_deployment, rabbit_password]

  # Define the app config
  app_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        # db specific data
        - name: db_name
        - name: db_root_password
        - name: db_username
        - name: db_password

        # apache specific data
        - name: apache_vhost_name
        - name: apache_install_root
        - name: apache_wsgi_path
        - name: apache_static_root

        # rabbit specific data
        - name: rabbit_vhost
        - name: rabbit_user
        - name: rabbit_password
        - name: rabbit_host

        # app installation data
        - name: app_install_dir
        - name: app_git_url
        - name: app_install_script
        - name: app_db_server
        - name: app_secret_key
      outputs:
        # db specific data
        - name: db_name
        - name: db_root_password
        - name: db_username
        - name: db_password

        # apache specific data
        - name: apache_vhost_name
        - name: apache_install_root
        - name: apache_wsgi_path
        - name: apache_static_root

        # rabbit specific data
        - name: rabbit_vhost
        - name: rabbit_user
        - name: rabbit_password
        - name: rabbit_host

        # app installation data
        - name: app_install_dir
        - name: app_git_url
        - name: app_install_script
        - name: app_db_server
        - name: app_secret_key
      config: |
        #!/bin/bash
        set -x
        function stash_config () {
          # TODO Put this stuff in zookeeper and query with hiera in puppet?
          # many ways to do this
          val=${!1}
          echo -n $val > ${heat_outputs_path}.$1
          echo "export PROVISION_$1=$val" >> /etc/environment
        }

        stash_config db_name
        stash_config db_root_password
        stash_config db_username
        stash_config db_password

        stash_config apache_vhost_name
        stash_config apache_install_root
        stash_config apache_wsgi_path
        stash_config apache_static_root

        stash_config rabbit_vhost
        stash_config rabbit_user
        stash_config rabbit_password
        stash_config rabbit_host

        stash_config app_install_dir
        stash_config app_git_url
        stash_config app_install_script
        stash_config app_db_server
        stash_config app_secret_key

  # Deploy and place application specific data onto the apache/app webserver
  app_config_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: app_config
      server:
        # Install the app config on the web server
        get_resource: web_server
      input_values:
        # TODO Figure out a way to generate random passwords
        db_root_password: asillypassword
        db_name: captain
        db_username: captain
        db_password: anothersillypassword

        apache_vhost_name: captain
        apache_install_root: /var/www/captain
        apache_wsgi_path: /var/www/captain/captain/wsgi.py
        apache_static_root: /var/www/captain/static/

        rabbit_vhost: /
        rabbit_user: shove
        rabbit_password: a-very-bad-password
        rabbit_host:
          get_attr: [db_server, first_address]

        app_install_dir: /var/www/captain
        app_git_url: https://github.com/uberj/captain.git
        app_install_script: install.sh
        app_db_server:
          # Get the internal address of the db
          get_attr: [db_server, first_address]
        app_secret_key: a-not-so-secret-key

  app_install:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: install_dir
      - name: git_url
      - name: install_script
      - name: branch
        default: master
      outputs:
      - name: result
      config: |
        #!/bin/bash
        set +x
        mkdir -p $(dirname $install_dir)
        if [ ! -f $install_dir/.git/index ]; then
          git clone -b $branch $git_url $install_dir
        fi
        $install_dir/$install_script


  # Install the application on the web_server
  app_install_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: app_install
      server:
        get_resource: web_server
      input_values:
        install_dir:
          get_attr: [app_config_deployment, app_install_dir]
        git_url:
          get_attr: [app_config_deployment, app_git_url]
        install_script:
          get_attr: [app_config_deployment, app_install_script]
        branch: heat

  # Make sure the captain daemons are running
  app_commands:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      outputs:
        - name: result
      config: |
        #/var/www/captain/bin/monitor_shove_instances
        class { 'supervisord':}

        supervisord::program { 'monitor_shove_instances':
          command     => '/var/www/captain/bin/monitor_shove_instances',
          autostart   => true,
        }

        supervisord::program { 'monitor_shove_logs':
          command     => '/var/www/captain/bin/monitor_shove_logs',
          autostart   => true,
        }

        cron::job{ 'process_command_schedule':
          minute      => '5/*',
          hour        => '*',
          date        => '*',
          month       => '*',
          weekday     => '*',
          user        => 'root',
          command     => '/var/www/captain/bin/process_command_schedule',
        } 




  # Install the application on the web_server
  app_commands_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: app_install
      server:
        get_resource: web_server

outputs:
  result:
    value:
      get_attr: [mysql_server_deployment, result]
  # DB output
  db_stdout:
    value:
      get_attr: [mysql_server_deployment, deploy_stdout]
  db_stderr:
    value:
      get_attr: [mysql_server_deployment, deploy_stderr]
  db_status_code:
    value:
      get_attr: [mysql_server_deployment, deploy_status_code]

  # Web output
  web_stdout:
    value:
      get_attr: [apache_deployment, deploy_stdout]
  web_result:
    value:
      get_attr: [apache_deployment, result]
  web_stderr:
    value:
      get_attr: [apache_deployment, deploy_stderr]
  web_status_code:
    value:
      get_attr: [apache_deployment, deploy_status_code]

  # Application output
  app_stdout:
    value:
      get_attr: [app_install_deployment, deploy_stdout]
  app_stderr:
    value:
      get_attr: [app_install_deployment, deploy_stderr]

  # MySQL client output
  mysql_client_app_stdout:
    value:
      get_attr: [mysql_client_deployment, deploy_stdout]
  mysql_client_app_stderr:
    value:
      get_attr: [mysql_client_deployment, deploy_stderr]

  web_public_ip:
    description: Floating IP address of database in public network
    value: { get_attr: [ db_floating_ip, floating_ip_address ] }

  # The IP address to point your browser at
  web_public_ip:
    description: Floating IP address of webserver in public network
    value: { get_attr: [ web_floating_ip, floating_ip_address ] }
